<div class="txt-center" style="margin: 60px 0">
  <div id="messages">
    <h1>A design system that fully embraces web standards.</h1>
    <h1 hidden>Because everything else is a pain.</h1>
    <h1 hidden>Does üëè not üëè sah üëè port üëè IE.</h1>
    <h1 hidden>Standards #FTW</h1>
    <h1 hidden>The cure for coding migraines they don't want you to know about!</h1>
    <h1 hidden>React is a scam.</h1>
    <h1 hidden>It's freedom, baby. Yeah!</h1>
    <h1 hidden>A small design system means a large...</h1>
    <h1 hidden>"Nothing is faster than nothing." -Me</h1>
    <h1 hidden>This shouldn't be free!!</h1>
    <h1 hidden>The AWS fees are too damn high!</h1>
    <h1 hidden>Stop reading this and start coding.</h1>
    <h1 hidden>Seriously. Drop in those CDN links and get to work.</h1>
    <h1 hidden>Wow, how many messages are there?</h1>
    <h1 hidden>17, including this one.</h1>
    <h1 hidden>Does it loop though?</h1>
    <h1 hidden>No.</h1>
  </div>
  <p class="txt-lg intro-text" style="margin: 0 auto 6px">M-'s goal is to add to HTML, not replace it or try to outsmart it.<br>This makes M- ideal for all web projects and skill levels.</p>
  <h5 class="benefits">
    <span>linkable</span>
    <m-vbar></m-vbar>
    <span>tiny <a href="#performance">6kb</a></span>
    <m-vbar></m-vbar>
    <span>
      <m-icon name="screen-smartphone" class="pos-relative" style="left: 3px"></m-icon>
      <m-icon name="screen-tablet" class="txt-sm"></m-icon>
      <m-icon name="screen-desktop" class="txt-lg pos-relative" style="top: 2px; left: 1px"></m-icon>
      &nbsp;&nbsp;responsive
    </span>
    <m-vbar></m-vbar>
    <span>WCAG 2.1 accessible</span>
    <m-vbar></m-vbar>
    <span>standards for <a href="#compatibility">maximum compatibility</a></span>
  </h5>
</div>
<h2 id="quick-start">Quick start</h2>
<p>This is the web, so just add these links in <code>&lt;head&gt;</code> and you're done!</p>
<code-sample readonly="readonly">
  <template>
    <link href="{{prodCdnUrl}}css" rel="stylesheet">
    <script src="{{prodCdnUrl}}js" defer></script>
  </template>
</code-sample>
<p>Now put this bit of HTML in a template and you'll see that green Alert component:</p>
<code-sample>
  <template>
    <m-alert type="success">
      M- is working! You get a trophy <m-icon name="trophy"></m-icon>
    </m-alert>
  </template>
</code-sample>
<hr class="mar-t-xl mar-b-xl">
<h2 id="tell-me">Summary</h2>
<p>M- is ready-to-use UI elements for websites (buttons, menus, etc.).</p>
<p>It works for pretty much any type of project.</p>
<p>Use it with your favorite web app framework, or all on its own for static sites, embedded widgets, and emails.</p>
<p>It's better because it's super small and fast and based on web standards.</p>
<p>M- is also a design system. It can scale across your organization by serving as the shared source of UI/UX "truth" for all web-based projects (i.e. code, documentation, and guidance). You can also fork M- and customize as you want.</p>
<h2 id="compatibility">M- is compatible with everything</h2>
<p>M- can be used anywhere HTML is used because it is HTML. That means SSR, SPA, PWA, static site, and email templates are compatible as well as virtually* all JavaScript frameworks past, present, and future. That's the power of leveraging web standards!</p>
<p>Large organizations especially benefit from this because M- can be shared across all projects without restricting framework choice or changing architectures.</p>
<p>As an example, here's the M- Alert component being used with many different technologies:</p>
<code-sample readonly="readonly">
<template>
  <!--   Vue   -->
  <m-alert v-if="alert" v-bind:type="alert.type">\{{ alert.message }}</m-alert>


  <!--   Riot   -->
  <m-alert if="{alert}" type="{alert.type}">{alert.message}</m-alert>


  <!--   Svelte   -->
  {#if alert}
    <m-alert bind:type="{alert.type}">{alert.message}</m-alert>
  {/if}


  <!--   Preact   -->
  {props.alert &&
    <m-alert type={props.alert.type}>{props.alert.message}</m-alert>
  }


  <!--   Handlebars   -->
  \{{#if alert}}
  <m-alert type="\{{alert.type}}">\{{alert.message}}</m-alert>
  \{{/if}}


  <!--   EJS, ERB   -->
  <m-alert type="<%= alert.type %>"><%= alert.message %></m-alert>


  <!--   Lit, Hyper, Lighter, vanilla template literals   -->
  `<m-alert type="${alert.type}">${alert.message}</m-alert>`


  <!--   and plain HTML of course :)   -->
  <m-alert type="success">My message</m-alert>
</template>
</code-sample>
<small>*Framework compatibility with Custom Elements is being tracked on <a href="https://custom-elements-everywhere.com">custom-elements-everywhere.com</a>. Today, all but
  <a href="https://custom-elements-everywhere.com/#react">one</a> works with this standard.</small>
<h2 id="performance">Performance</h2>
<p>M- is fast! Its <span class="fnt-bold">execution speed</span> comes from leveraging standards as much as possible in order to minimize code, retain browser optimizations, and eliminate dependencies. The latest JavaScript frameworks and virtual DOMs are still relatively expensive abstractions with execution overhead, and when it comes to code, nothing is faster than nothing!</p>
<p>In addition to execution speed, <span class="fnt-bold">page loads</span> are faster with M- because it is drastically smaller:</p>
<table layout="fixed">
  <tr>
    <td colspan="1">
      <span class="fnt-bold">M-</span>
    </td>
    <td colspan="6">
      <meter min="0" max="244" low="20" optimum="12" high="80" value="6.8"></meter>
      <small>6.8kb</small>
    </td>
  </tr>
  <tr>
    <td colspan="1">
      <span class="fnt-bold">Bootstrap</span>
    </td>
    <td colspan="6">
      <meter min="0" max="244" low="20" optimum="12" high="80" value="71.4"></meter>
      <small>71.4kb</small>
    </td>
  </tr>
  <tr>
    <td colspan="1">
      <span class="fnt-bold">Material Web</span>
    </td>
    <td colspan="6">
      <meter min="0" max="244" low="20" optimum="12" high="80" value="79.5"></meter>
      <small>79.5kb</small>
    </td>
  </tr>
  <tr>
    <td colspan="1">
      <span class="fnt-bold">Zurb Foundation</span>
    </td>
    <td colspan="6">
      <meter min="0" max="244" low="20" optimum="12" high="80" value="87.8"></meter>
      <small>87.8kb</small>
    </td>
  </tr>
  <tr>
    <td colspan="1">
      <span class="fnt-bold">React Bootstrap</span>
    </td>
    <td colspan="6">
      <meter min="0" max="244" low="20" optimum="12" high="80" value="103.1"></meter>
      <small>103.1kb</small>
    </td>
  </tr>
  <tr>
    <td colspan="1">
      <span class="fnt-bold">Material-UI</span>
    </td>
    <td colspan="6">
      <meter min="0" max="244" low="20" optimum="12" high="80" value="134.2"></meter>
      <small>134.2kb</small>
    </td>
  </tr>
  <tr>
    <td colspan="1">
      <span class="fnt-bold">Microsoft Fabric</span>
    </td>
    <td colspan="6">
      <meter min="0" max="244" low="20" optimum="12" high="80" value="244"></meter>
      <small>244.1kb</small>
    </td>
  </tr>
</table>
<small><span class="fnt-bold">Note:</span> Sizes are min+gzip and include all required stylesheets, scripts, and runtime dependencies.</small>
<!--<p>Yes, this is purely a comparison of size and not a precise apples-to-apples comparison. The point is M- adds very little to page load, which is extremely important for mobile users.</p>-->
<!--<p>Switching to M- makes your payload very small! Or another way of looking at it is you're left with a big surplus budget to use for other things. M- plus your app and its dependencies could all easily fit inside just one of those!</p>-->
<h2 id="installation">Installation</h2>
<h3>CDN</h3>
<p>Development: <code>{{devCdnUrl}}[css|js]</code></p>
<p>Production: <code>{{prodCdnUrl}}[css|js]</code></p>
<h3>npm</h3>
<code>npm install m-</code>
<p>Built assets including <a href="/custom-props">custom properties</a> are located in <code>dist/</code>.</p>
<h2 id="browsers">Browser support</h2>
<p>M- works with the latest versions of:</p>
<ul>
  <li>Chrome</li>
  <li>Chrome for Android</li>
  <li>Safari</li>
  <li>iOS Safari</li>
  <li>Firefox</li>
  <li>Edge</li>
</ul>
<p>Other modern browsers that support <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/customElements" target="_blank" rel="noopener">Custom Elements</a> are likely to work, but are not tested (<a href="https://github.com/jfbrennan/m-/issues" target="_blank" rel="noopener">file
    a bug if you see something</a>). IE is not supported and is unlikely to work even if you polyfill.</p>
<h2 id="about">More about M-</h2>
<h3>Purpose</h3>
<p>M-'s purpose is to give you a complete set of UI components for building web apps, but in a way that fully leverages web standards and avoids coupling your view layer to a specific framework. It does this by <span class="fnt-italic">embracing</span> HTML, not replacing it or trying to outsmart it like some frameworks do. The result is a uniquely small and fast design system with maximum longevity (standards outlive everything!).</p>
<p>Depending on the kind of project you're working on, you can use M- on its own or alongside your framework of choice. That framework is responsible for the
  <em>structure and state of your application</em> while HTML and M- supply the top layer of <em>UI components</em>.</p>
<h3>The prefix</h3>
<p>The "m-" prefix is required for custom HTML (learn more about that in
  <a href="https://dev.to/jfbrennan/custom-html-tags-4788" target="_blank" rel="noopener">this blog post</a>). The letter "m" is short for markup, as in HT<span class="fnt-bold">M</span>L, and was chosen to serve as a reminder that M- is all about that beautiful declarative markup!</p>
<h3>Design philosophy</h3>
<p>M- believes in and is committed to the open web platform. Developing on the web is awesome because:</p>
<ul>
  <li>It's totally open</li>
  <li>Has no barriers to entry</li>
  <li>Easier than other platforms</li>
  <li>Available on virtually every OS and device in the world!</li>
  <li>Has the biggest and most active user base by far!</li>
</ul>
<p>M- was designed with all that in mind. It's why
  <a href="#installation">CDN install</a> is the first option and not buried or unavailable as if linking to other resources on the internet is a last resort. It's why M- components are built with standard, approachable tech and not a popular JavaScript library. It's why there is no special syntax or proprietary ideas and why there's no dependencies. It's why the project is open source.</p>
<p>The intent of the M- API design is to be familiar. Where possible, M- matches native HTML, e.g. <code>type=""</code>, <code>name=""</code>, <code>disabled</code>, and when there isn't a native example to follow M- strives to use familiar patterns, e.g. <code>dismissible="false"</code> for Alert was chosen because it feels similar to the native <code>draggable="false"</code> attribute. If you could cover up all the <code>m-</code> prefixes in your markup, the hope is you couldn't tell the difference between native HTML elements and M-.</p>
<h3>It's for everyone!</h3>
<p>The JavaScript community has been convinced of an awful lie:</p>
<blockquote>Modern web development requires special tools, syntax, compilers, and all sorts of time-wasting pain.</blockquote>
<p>It's not true! M- bucks the trend and doesn't need to be installed or configured, has no CLI, and doesn't send you down a rabbit hole of pain. This is the web and web development shouldn't be like enterprise Java! The web is an open platform accessible to everyone and so a design system for the web shouldn't require advanced knowledge just to get started, and it shouldn't require a commitment to learn a specific framework's idioms and API in order to make full use of it. M- serves true beginners equally as well as it does professional software engineers. So, whether you're building your first website or a large scale application with millions of users, M- helps you quickly build UI with easy-to-use, long-lasting, standards-based code.</p>
<!--<h2>Contribution & support</h2>-->
<!--<p>If M- has helped you, please help M- with its hosting fees: <a href="">Open Collective</a></p>-->
<!--<p>If you want to help, <a href="https://github.com/jfbrennan/m-/issues" rel="noopener">come on over to GitHub</a> and help.</p>-->

<script>
  // Cycle through the messages at the top of the page
  const intervalId = setInterval(goToNextMessage, 3500);

  function goToNextMessage() {
    const currentMessage = document.getElementById('messages').querySelector('h1:not([hidden])');
    const nextMessage = currentMessage.nextElementSibling;

    // Hide current, show next
    if (nextMessage) {
      currentMessage.hidden = true;
      nextMessage.hidden = false;
    }
    else {
      clearInterval(intervalId);
    }
  }
</script>